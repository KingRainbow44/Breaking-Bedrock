plugins {
    id 'fabric-loom' version '1.0.11'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    mavenCentral()

    // CloudBurstMC Maven repositories.
    maven {
        name = 'nukkitx-repo-release'
        url = 'https://repo.opencollab.dev/maven-releases/'
    }
    maven {
        name = 'nukkitx-repo-snapshot'
        url = 'https://repo.opencollab.dev/maven-snapshots/'
    }

    // Waterdog Maven repository.
    maven {
        name = 'waterdog'
        url = 'https://repo.waterdog.dev/artifactory/main/'
    }
}

dependencies {
    // To change the versions see the gradle.properties file.
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Debug library for Web Sockets.
    modImplementation "org.java-websocket:Java-WebSocket:1.5.3"
    // Library for handling HTTP requests.
    modImplementation "tech.xigam:Express.Java:1.2.2"
    modImplementation "com.squareup.okhttp3:okhttp:4.10.0"

    // Minecraft: Bedrock protocol libraries.
    modImplementation "org.cloudburstmc.protocol:common:${project.protocol_version}"
    modImplementation "org.cloudburstmc.protocol:bedrock-codec:${project.protocol_version}"
    modImplementation "org.cloudburstmc.protocol:bedrock-connection:${project.protocol_version}"

    // Developer tools. (Reflection + access wideners)
    modImplementation "org.reflections:reflections:0.10.2"
    modImplementation "org.projectlombok:lombok:1.18.24"
    annotationProcessor "org.projectlombok:lombok:1.18.24"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
